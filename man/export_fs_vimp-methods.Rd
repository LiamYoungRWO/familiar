% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FamiliarDataComputationVimp.R
\name{export_fs_vimp}
\alias{export_fs_vimp}
\alias{export_fs_vimp,familiarCollection-method}
\alias{export_fs_vimp,ANY-method}
\title{Extract and export feature selection variable importance.}
\usage{
export_fs_vimp(
  object,
  dir_path = NULL,
  aggregate_results = TRUE,
  aggregation_method = waiver(),
  rank_threshold = waiver(),
  ...
)

\S4method{export_fs_vimp}{familiarCollection}(
  object,
  dir_path = NULL,
  aggregate_results = TRUE,
  aggregation_method = waiver(),
  rank_threshold = waiver(),
  ...
)

\S4method{export_fs_vimp}{ANY}(
  object,
  dir_path = NULL,
  aggregate_results = TRUE,
  aggregation_method = waiver(),
  rank_threshold = waiver(),
  ...
)
}
\arguments{
\item{object}{A \code{familiarCollection} object, or other other objects from which
a \code{familiarCollection} can be extracted. See details for more information.}

\item{dir_path}{Path to folder where extracted data should be saved. \code{NULL}
will allow export as a structured list of data.tables.}

\item{...}{
  Arguments passed on to \code{\link[=extract_fs_vimp]{extract_fs_vimp}}, \code{\link[=as_familiar_collection]{as_familiar_collection}}
  \describe{
    \item{\code{aggregation_method}}{Method for aggregating variable importances for the
purpose of evaluation. Variable importances are determined during feature
selection steps and after training the model. Both types are evaluated, but
feature selection variable importance is only evaluated at run-time.

See the documentation for the \code{vimp_aggregation_method} argument in
\code{summon_familiar} for information concerning the different available
methods.

If not provided explicitly, this parameter is read from settings used at
creation of the underlying \code{familiarModel} objects.}
    \item{\code{rank_threshold}}{The threshold used to  define the subset of highly
important features during evaluation.

See the documentation for the \code{vimp_aggregation_rank_threshold} argument in
\code{summon_familiar} for more information.

If not provided explicitly, this parameter is read from settings used at
creation of the underlying \code{familiarModel} objects.}
    \item{\code{message_indent}}{Number of indentation steps for messages shown during
computation and extraction of various data elements.}
    \item{\code{verbose}}{Flag to indicate whether feedback should be provided on the
computation and extraction of various data elements.}
    \item{\code{familiar_data_names}}{Names of the dataset(s). Only used if the \code{object} parameter
is one or more \code{familiarData} objects.}
    \item{\code{collection_name}}{Name of the collection.}
  }}
}
\value{
A data.table (if \code{dir_path} is not provided), or nothing, as all data
is exported to \code{csv} files.
}
\description{
Extract and export feature selection variable importance from a
familiarCollection.
}
\details{
Data, such as model performance and calibration information, is
usually collected from a \code{familiarCollection} object. However, you can also
provide one or more \code{familiarData} objects, that will be internally
converted to a \code{familiarCollection} object. Paths to the previous files can
also be provided.

Unlike other export function, export using \code{familiarEnsemble} or
\code{familiarModel} objects is not possible. This is because feature selection
variable importance is not stored within \code{familiarModel} objects.

All parameters aside from \code{object} and \code{dir_path} are only used if \code{object}
is not a \code{familiarCollection} object, or a path to one.

Variable importance is based on the ranking produced by feature selection
routines. In case feature selection was performed repeatedly, e.g. using
bootstraps, feature ranks are first aggregated using the method defined by
the \code{aggregation_method}, some of which require a \code{rank_threshold} to
indicate a subset of most important features.

Information concerning highly similar features that form clusters is
provided as well. This information is based on consensus clustering of the
features. This clustering information is also used during aggregation to
ensure that co-clustered features are only taken into account once.
}
