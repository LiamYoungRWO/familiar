% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ParseData.R
\name{.finish_data_preparation}
\alias{.finish_data_preparation}
\title{Internal function for finalising generic data processing}
\usage{
.finish_data_preparation(
  data,
  sample_id_column,
  batch_id_column,
  outcome_column,
  outcome_type,
  include_features,
  class_levels,
  reference = NULL
)
}
\arguments{
\item{data}{data.table with feature data}

\item{sample_id_column}{(\strong{recommended}) Name of the column containing
sample or subject identifiers. This parameter is required if more than one
dataset is provided.}

\item{batch_id_column}{(\strong{recommended}) Name of the column containing batch
or cohort identifiers. This parameter is required if more than one dataset
is provided, or if external validation is performed.}

\item{outcome_column}{(\strong{recommended}) Name of the column containing the
outcome of interest. May be identified from a formula, if a formula is
provided as an argument. Otherwise an error is raised. Note that \code{survival}
type outcomes require two columns that indicate the time-to-event or the
time of last follow-up and the event status. Event status can be \code{0} to
indicate right-censoring and \code{1} to indicate that the event occurred.}

\item{outcome_type}{(\strong{recommended}) Type of outcome found in the outcome
column. The outcome type determines many aspects of the overall process,
e.g. the available feature selection methods and learners, but also the
type of assessments that can be conducted to evaluate the resulting models.
Implemented outcome types are:
\itemize{
\item \code{binomial}: categorical outcome with 2 levels.
\item \code{multinomial}: categorical outcome with 2 or more levels.
\item \code{count}: Poisson-distributed numeric outcomes.
\item \code{continuous}: general continuous numeric outcomes.
\item \code{survival}: survival outcome for time-to-event data.
}

If not provided, the algorithm will attempt to obtain outcome_type from
contents of the outcome column. This may lead to unexpected results, and we
therefore advise to provide this information manually.}

\item{include_features}{(\emph{optional}) Feature columns that are specifically
included in the data set. By default all features are included. Cannot
overlap with \code{exclude_features}, but may overlap \code{signature}. Features in
\code{signature} are always included. If both \code{exclude_features} and
\code{include_features} are provided, \code{include_features} takes precedence,
provided that there is no overlap between the two.}

\item{class_levels}{(\emph{optional}) Class levels for \code{binomial} or \code{multinomial}
outcomes. This argument can be used to specify the ordering of levels for
categorical outcomes. These class levels must exactly match the levels
present in the outcome column.`}

\item{reference}{list with class levels (\code{levels}) and ordering (\code{ordered}) per list entry. Each list entry
should have the name of the corresponding feature. The intended use is that \code{featureInfo} objects
are parsed to generate such a reference.}
}
\value{
data.table with expected column names.
}
\description{
Internal function for finalising generic data processing
}
\details{
This function is used to update data.table provided by loading the data. When part
of the main familiar workflow, this function is used after .parse_initial_settings
--> .load_data --> .update_initial_settings.

When used to parse external data (e.g. in conjunction with familiarModel) it follows
after .load_data. Hence the function contains several checks which are otherwise part of
.update_initial_settings.
}
\keyword{internal}
